name: validate

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, edited, labeled, unlabeled]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node from .nvmrc (if present)
        if: ${{ hashFiles('.nvmrc') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup Node 20 (fallback)
        if: ${{ hashFiles('.nvmrc') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack & install pinned pnpm
        run: |
          corepack enable
          corepack install
          node -v
          pnpm -v

      - name: Compute pnpm store path
        id: pnpm_store
        run: echo "path=$(pnpm store path --silent)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm_store.outputs.path }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Guard workflows (optional)
        run: node scripts/ci/guard-workflows.mjs
        continue-on-error: true

      - name: Guard lockfile drift (optional)
        run: node scripts/ci/guard-lock-drift.mjs
        continue-on-error: true

      - name: Install dependencies (frozen)
        run: pnpm -r install --frozen-lockfile

      - name: Typecheck (workspace)
        run: pnpm -w typecheck

      - name: Lint (workspace)
        run: pnpm -w lint

      - name: Unit tests
        run: pnpm -w test -- --run

      # === QA LABEL GATE (PRs only) ===
      - name: QA Gate — require product:approved + qa:approved
        if: ${{ github.event_name == 'pull_request'
                && !github.event.pull_request.draft
                && github.actor != 'dependabot[bot]'
                && github.actor != 'renovate[bot]'
                && (env.QA_GATE_BYPASS != '1') }}
        uses: actions/github-script@v7
        with:
          script: |
            const required = ['product:approved','qa:approved'];
            const labels = (context.payload.pull_request?.labels ?? []).map(l => l.name);
            const missing = required.filter(x => !labels.includes(x));
            if (missing.length) core.setFailed(`Missing required QA labels: ${missing.join(', ')}`);
            else core.info('QA labels present ✔');
